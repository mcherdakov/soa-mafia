// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SOAMafiaClient is the client API for SOAMafia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SOAMafiaClient interface {
	ConnectQueue(ctx context.Context, in *ConnectQueueIn, opts ...grpc.CallOption) (SOAMafia_ConnectQueueClient, error)
	DisconnectQueue(ctx context.Context, in *DisconnectQueueIn, opts ...grpc.CallOption) (*DisconnectQueueOut, error)
}

type sOAMafiaClient struct {
	cc grpc.ClientConnInterface
}

func NewSOAMafiaClient(cc grpc.ClientConnInterface) SOAMafiaClient {
	return &sOAMafiaClient{cc}
}

func (c *sOAMafiaClient) ConnectQueue(ctx context.Context, in *ConnectQueueIn, opts ...grpc.CallOption) (SOAMafia_ConnectQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &SOAMafia_ServiceDesc.Streams[0], "/SOAMafia/ConnectQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &sOAMafiaConnectQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SOAMafia_ConnectQueueClient interface {
	Recv() (*Notifications, error)
	grpc.ClientStream
}

type sOAMafiaConnectQueueClient struct {
	grpc.ClientStream
}

func (x *sOAMafiaConnectQueueClient) Recv() (*Notifications, error) {
	m := new(Notifications)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sOAMafiaClient) DisconnectQueue(ctx context.Context, in *DisconnectQueueIn, opts ...grpc.CallOption) (*DisconnectQueueOut, error) {
	out := new(DisconnectQueueOut)
	err := c.cc.Invoke(ctx, "/SOAMafia/DisconnectQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SOAMafiaServer is the server API for SOAMafia service.
// All implementations must embed UnimplementedSOAMafiaServer
// for forward compatibility
type SOAMafiaServer interface {
	ConnectQueue(*ConnectQueueIn, SOAMafia_ConnectQueueServer) error
	DisconnectQueue(context.Context, *DisconnectQueueIn) (*DisconnectQueueOut, error)
	mustEmbedUnimplementedSOAMafiaServer()
}

// UnimplementedSOAMafiaServer must be embedded to have forward compatible implementations.
type UnimplementedSOAMafiaServer struct {
}

func (UnimplementedSOAMafiaServer) ConnectQueue(*ConnectQueueIn, SOAMafia_ConnectQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectQueue not implemented")
}
func (UnimplementedSOAMafiaServer) DisconnectQueue(context.Context, *DisconnectQueueIn) (*DisconnectQueueOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectQueue not implemented")
}
func (UnimplementedSOAMafiaServer) mustEmbedUnimplementedSOAMafiaServer() {}

// UnsafeSOAMafiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SOAMafiaServer will
// result in compilation errors.
type UnsafeSOAMafiaServer interface {
	mustEmbedUnimplementedSOAMafiaServer()
}

func RegisterSOAMafiaServer(s grpc.ServiceRegistrar, srv SOAMafiaServer) {
	s.RegisterService(&SOAMafia_ServiceDesc, srv)
}

func _SOAMafia_ConnectQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectQueueIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SOAMafiaServer).ConnectQueue(m, &sOAMafiaConnectQueueServer{stream})
}

type SOAMafia_ConnectQueueServer interface {
	Send(*Notifications) error
	grpc.ServerStream
}

type sOAMafiaConnectQueueServer struct {
	grpc.ServerStream
}

func (x *sOAMafiaConnectQueueServer) Send(m *Notifications) error {
	return x.ServerStream.SendMsg(m)
}

func _SOAMafia_DisconnectQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectQueueIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SOAMafiaServer).DisconnectQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SOAMafia/DisconnectQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SOAMafiaServer).DisconnectQueue(ctx, req.(*DisconnectQueueIn))
	}
	return interceptor(ctx, in, info, handler)
}

// SOAMafia_ServiceDesc is the grpc.ServiceDesc for SOAMafia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SOAMafia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SOAMafia",
	HandlerType: (*SOAMafiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisconnectQueue",
			Handler:    _SOAMafia_DisconnectQueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectQueue",
			Handler:       _SOAMafia_ConnectQueue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
